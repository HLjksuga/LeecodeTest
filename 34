vector<int> searchRange1(vector<int>& nums, int target) {
    if (nums.size() == 0)
        return { -1,- 1 };
    vector<int> res;
    multiset<int> ss;
    for (int i = 0; i < nums.size(); i++)
    {
        ss.insert(nums[i]);
    }
    if (ss.find(target) == ss.end())
    {
        return { -1,-1 };
    }
    else {
        cout << ss.count(target) << endl;
        if (ss.count(target) == 1)
        {
            int j = 0;
            auto it = ss.begin();
            while (it != ss.find(target))
            {
                it++;
                j++;
            }
            return { j,j };
        }
        else {
            int j = 0;
            auto it = ss.begin();
            while (it != ss.find(target))
            {
                it++;
                j++;
            }
            return { j,j+(int)ss.count(target)-1 };
        }
    }
    return { -1,-1 };
}

//二分法
vector<int> searchRange(vector<int>& nums, int target)
{
    if (nums.size() == 0)
        return {-1,-1};
    int l = 0, r = nums.size() - 1;
    while (l < r)
    {
        int mid = (l + r ) / 2;
        if (nums[mid] >= target)//>=target的最左边界
        {
            r = mid;
        }
        else {
            l = mid + 1;
        }
    }
    if (nums[r] != target)
        return { -1,-1 };
    int L = r;
    l = 0, r = nums.size() - 1;
    while (l < r)
    {
        int mid = (l + r+1 ) / 2;
        if (nums[mid] <= target)//<=target的最右边界
        {
            l = mid;
        }
        else {
            r = mid -1;
        }
    }
    return {L,r};
}
